{"version":3,"file":"handpose.js","sources":["../../src/handpose.js","../../src/handpose.js?comlink"],"sourcesContent":["// this runs as a web worker\nimport {transfer} from 'comlink';\nimport normalize from './normalize.js';\nimport { Matrix4, Quaternion } from 'three';\n\nconsole.log('Worker started');\n\nconst poses = new Map();\nconst tempMat1 = new Matrix4();\nconst tempMat2 = new Matrix4();\nconst tempQuat1 = new Quaternion();\nconst tempQuat2 = new Quaternion();\nclass HandPose {\n\t#matches\n\tconstructor () {\n\t\tthis.#matches = [];\n\t}\n\tstatic async loadPose(name, path) {\n\t\tconst url = new URL(path);\n\t\tconst buffer = await fetch(url).then(response => response.arrayBuffer());\n\t\tconst pose = new Float32Array(buffer);\n\t\tposes.set(name, pose);\n\t}\n\tstatic setPose(name, pose) {\n\t\tposes.set(name, pose);\n\t}\n\tstatic getPose(name) {\n\t\t// This is a copy not a transfer\n\t\treturn poses.get(name);\n\t}\n\tupdate (headPose, handPose, handedness) {\n\n\t\tnormalize(handPose);\n\n\t\tconst distances = [];\n\t\tfor (const [name, poseData] of poses) {\n\t\t\tconst isRight = Number(handedness === \"right\");\n\t\t\tconst poseHandDataSize = poseData[0];\n\t\t\tconst poseHandData = new Float32Array(poseData.buffer, (\n\t\t\t\t1 + // poseHandDataSize offset\n\t\t\t\t(poseHandDataSize * 16) * isRight // offset for right hand\n\t\t\t)*4 , poseHandDataSize * 16);\n\t\t\tconst poseWeightData = new Float32Array(poseData.buffer, (\n\t\t\t\t1 + // poseHandDataSize offset\n\t\t\t\t(poseHandDataSize * 16) * 2 + // offset for after hand data\n\t\t\t\t(poseHandDataSize * isRight)      // offset for right hand\n\t\t\t)*4 , poseHandDataSize);\n\n\t\t\tconst jointCount = Math.min(poseHandDataSize, handPose.length/16);\n\t\t\tlet dist = 0;\n\t\t\tlet totalWeight = 0.0001;\n\t\t\tfor (let i=0; i<jointCount; i++) {\n\t\t\t\tconst poseWeight = poseWeightData[i];\n\t\t\t\ttotalWeight += poseWeight;\n\t\t\t\tif (i === 0) continue;\n\n\t\t\t\t// Algo based on join rotation apply quaternion to a vector and\n\t\t\t\t// compare positions of vectors should work a bit better\n\t\t\t\tconst o = i*16;\n\t\t\t\ttempMat1.fromArray(poseHandData, o);\n\t\t\t\ttempMat2.fromArray(handPose, o);\n\t\t\t\ttempQuat1.setFromRotationMatrix(tempMat1);\n\t\t\t\ttempQuat2.setFromRotationMatrix(tempMat2);\n\t\t\t\tdist += tempQuat1.angleTo(tempQuat2) * poseWeight;\n\t\t\t}\n\t\t\tdist = dist / totalWeight;\n\t\t\tdistances.push([name, dist]);\n\t\t}\n\n\t\treturn transfer({\n\t\t\tusedHandArrayBuffer: handPose,\n\t\t\tdistances: distances.sort((a,b)=>a[1]-b[1])\n\t\t}, [handPose.buffer]);\n\t}\n\tgetMatchedPoses () {\n\t\treturn this.#matches;\n\t}\n}\n\nexport default HandPose;\n","\n\t\timport * as m from \"/Applications/MAMP/htdocs/Illegal-Mining-Panorama/v.3.1 - Mixed Reality Wassa Japa/handy-work/src/handpose.js\";\n\t\timport {expose} from \"comlink\";\n\n\t\texpose(m);\n\t"],"names":[],"mappings":"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"}